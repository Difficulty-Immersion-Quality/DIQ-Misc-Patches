function CHT_ArcaneAcuityGlovesCondition()
    return IsSmiteSpells()
    | SpellId('Target_BoomingBlade_ClassSpell')
    | IsSpellChildOrVariantFromContext('Target_BoomingBlade_ClassSpell')
    | SpellId('Target_BoomingBlade')
    | IsSpellChildOrVariantFromContext('Target_BoomingBlade')
    | SpellId('Target_BoomingBlade')
    | IsSpellChildOrVariantFromContext('Target_BoomingBlade')
    | SpellId('Target_EnsnaringStrike')
    | SpellId('Projectile_EnsnaringStrike')
    | IsSpellChildOrVariantFromContext('Target_EnsnaringStrike')
    | IsSpellChildOrVariantFromContext('Projectile_EnsnaringStrike')
    | SpellId('Projectile_HailOfThorns')
    | IsSpellChildOrVariantFromContext('Projectile_HailOfThorns')
    | (HasStatus('FLAME_BLADE',GetActiveWeapon()) & IsMeleeSpellAttack()) | (HasStatus('FLAME_BLADE',GetActiveWeapon(context.Source, false)) & IsMeleeSpellAttack())
    | (HasStatus('FLAME_BLADE_4',GetActiveWeapon()) & IsMeleeSpellAttack()) | (HasStatus('FLAME_BLADE_4',GetActiveWeapon(context.Source, false)) & IsMeleeSpellAttack())
    | (HasStatus('FLAME_BLADE_6',GetActiveWeapon()) & IsMeleeSpellAttack()) | (HasStatus('FLAME_BLADE_6',GetActiveWeapon(context.Source, false)) & IsMeleeSpellAttack())
    | (HasStatus('SHADOW_BLADE',GetActiveWeapon()) & IsMeleeWeaponAttack()) | (HasStatus('SHADOW_BLADE',GetActiveWeapon(context.Source, false)) & IsMeleeWeaponAttack())
    | (IsSpell() & IsWeaponAttack())
	| (IsCantrip() & IsWeaponAttack())
end

function CHT_BanishingSmiteCheck(entity)
    entity = entity or context.Target
    return ConditionResult(entity.HPPercentage < 50)
end

function CHT_MaximumStackableStatus_4(entity, stringStatusGroupName)
    local entity = entity or context.Target
    return ConditionResult(GetStatusDuration(stringStatusGroupName, entity) > 4)
end

function CHT_IsBanishSpell()
	return SpellID('Target_Banishment') | IsSpellChildOrVariantFromContext('Target_Banishment') | SpellID('Shout_WildMagic_Banish') | SpellID('Shout_WildMagic_Banished') | SpellID('OO_Shout_BanishUnholy') | SpellID('Target_DispelEvilAndGood_Dismissal')
end

function CHT_IsSmite()
    return SpellId('Target_Smite_Banishing') | SpellId('Projectile_Smite_Banishing') | IsSpellChildOrVariantFromContext('Target_Smite_Banishing') | IsSpellChildOrVariantFromContext('Projectile_Smite_Banishing') | SpellId('Target_Smite_Branding') | IsSpellChildOrVariantFromContext('Target_Smite_Branding') | SpellId('Projectile_Smite_Branding') | IsSpellChildOrVariantFromContext('Projectile_Smite_Branding') | SpellId('Target_Smite_Blinding') | IsSpellChildOrVariantFromContext('Target_Smite_Blinding') | SpellId('Target_Smite_Searing') | IsSpellChildOrVariantFromContext('Target_Smite_Searing') | SpellId('Target_StaggeringSmite') | IsSpellChildOrVariantFromContext('Target_StaggeringSmite') | SpellId('Target_Smite_Thunderous') | IsSpellChildOrVariantFromContext('Target_Smite_Thunderous') | SpellId('Target_Smite_Wrathful') | IsSpellChildOrVariantFromContext('Target_Smite_Wrathful') | SpellId('Target_Smite_Divine') | IsSpellChildOrVariantFromContext('Target_Smite_Divine') | SpellId('Target_Smite_Divine_Acid') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Acid') | SpellId('Target_Smite_Divine_Chaos') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Chaos') | SpellId('Target_Smite_Divine_Cold') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Cold') | SpellId('Target_Smite_Divine_Fire') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Fire') | SpellId('Target_Smite_Divine_Force') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Force') | SpellId('Target_Smite_Divine_Lightning') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Lightning') | SpellId('Target_Smite_Divine_Necro') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Necro') | SpellId('Target_Smite_Divine_Poison') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Poison') | SpellId('Target_Smite_Divine_Psychic') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Psychic') | SpellId('Target_Smite_Divine_Thunder') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_Thunder') | SpellId('Target_Smite_Divine_War') | IsSpellChildOrVariantFromContext('Target_Smite_Divine_War') | SpellId('Target_Smite_Unholy_Oathbreaker') | IsSpellChildOrVariantFromContext('Target_Smite_Unholy_Oathbreaker')
end

--Blocks SpellFail statuses from trigging OnStatusApply effects
function StatusDoesNotInvokeOnStatusApply()
    return StatusId('PERFORM_POSITIVE_DOS2_1')
    | StatusId('PERFORM_POSITIVE_DOS2_2')
    | StatusId('PERFORM_POSITIVE_DOS2_3')
    | StatusId('DOS2_JOIN_1')
    | StatusId('DOS2_JOIN_2')
    | StatusId('DOS2_JOIN_3')
    | StatusId('PERFORM_POSITIVE')
    | StatusId('PERFORM_POSITIVE_THEPOWER')
    | StatusId('PERFORM_POSITIVE_STARGAZING')
    | StatusId('PERFORM_POSITIVE_BARDDANCE')
    | StatusId('PERFORM_NEGATIVE')
    | StatusId('DASH')
    | StatusId('DASH_STACKED')
    | StatusId('DASH_STACKED_2')
    | StatusId('SNEAKING') 
    | StatusId('SNEAKING_CLEAR')
    | StatusId('SNEAKING_LIGHTLY_OBSCURED')
    | StatusId('SNEAKING_HEAVILY_OBSCURED')
    | StatusId('DISENGAGE') 
    | StatusId('NON_LETHAL')
    | StatusId('MONK_SOUND_SWITCH')
    | StatusId('FLANKED')
    | StatusId('MAG_FROST_DURATION_TECHNICAL')
    | StatusId('MAG_FROST_FROZEN_CHECK_TECHNICAL') 
    | StatusId('MAG_RADIANT_RADIATING_ORB_DURATION_TECHNICAL')
    | StatusId('MAG_ZOC_FORCE_CONDUIT_DURATION_TECHNICAL')
    | StatusId('MAG_FIRE_HEAT_DURATION_TECHNICAL')
    | StatusId('MAG_THUNDER_REVERBERATION_DURATION_TECHNICAL')
    | StatusId('MAG_PSYCHIC_MENTAL_FATIGUE_DURATION_TECHNICAL')
    | StatusId('YSRSLIDFWWADNIWHWIHLY_YWNK')
    | StatusId('SAVED_AGAINST_HOSTILE_SPELL')
    | StatusId('COLDBRIM_CHILL_ONCE')
    | StatusId('ARCANE_ECHOMALEFACTION_ONCE')
end

-- ==================================== Custom function for getting the highest ability score ====================================
--JuuM_GetHighestAbility({'Intelligence','Wisdom','Charisma'})

function GetHighestAbility(abilities,entity)
    local entity = entity or context.Source
    local highestValue = 0
    local highestAbility = abilities[1]
    --will return first ability if tie
    for _,ability in ipairs(abilities) do
        if entity[ability] > highestValue then
            highestValue = entity[ability]
            highestAbility = Ability[ability]
        end
    end
    return highestAbility
end

-- ==================================== Make Counterspell use the spellcasting modifier instead of defaulting to Intelligence ====================================

function TryCounterspellHigherLevel(level)
    local spellPowerLevel = SpellPowerLevelEqualOrLessThan(level)
    if not spellPowerLevel.Result then
        local counterspellDC = 10 + context.HitDescription.SpellPowerLevel
        local ability = GetHighestAbility({'Intelligence','Charisma'},context.Observer)        
        local st = AbilityCheck(ability, counterspellDC, false, false, 0, context.Observer, context.Observer)
        return ConditionResult(st.Result,{},{},st.Chance)
    end
    return ConditionResult(true,{},{},1.0)
end

-- ==================================== Metamagic fixes ====================================

--Twinned Spell projectile fix
function TwinnedProjectileSpellCheck()
    return ~NumberOfTargetsGreaterThan(1) & TargetRadiusGreaterThan(1.5) & ~AreaRadiusGreaterThan(0) & (HasSpellFlag(SpellFlags.Spell) | NonSpellMetamagicAbilities()) & SpellTypeIs(SpellType.Projectile) & ~MetamagicExclusionSpells() & ~IsSpellChildOrVariantFromContext('Projectile_WitchBolt')
end

--Adds item spell variants to Metamagic exclusion list
function MetamagicExclusionSpells()
    return SpellId('Target_MistyStep') | SpellId('Target_WildMagic_Teleport') | SpellId('Target_SpeakWithDead') | SpellId('Target_SpeakWithDead_FreeRecast') | SpellId('Target_SpeakWithDead_Amulet_CHA') | SpellId('Target_Light') | SpellId('Projectile_ChainLightning') | SpellId('Projectile_MAG_Legendary_Chromatic_ChainLightning') | SpellId('Target_UNI_MistyStep_DrowCommander_Amulet') | SpellId('Target_WYR_Circus_TeleportBoots_MistyStep') | SpellId('Target_UNI_MistyStep_Nightwalkers') | SpellId('Target_UND_Light_Tower_Ring')
end